name: Unit Testing

on:
  workflow_call:
    inputs:
      environment_file:
        description: filename of conda env file
        required: false
        type: string
        default: environment.yml
      python_versions:
        description: string containing a JSON array of versions
        required: false
        type: string
        default: '["3.9"]'
      apt_packages:
        description: string containing apt package names
        required: false
        type: string
        default: ''
      pip_install_args:
        description: args to pass to pip install
        required: false
        type: string
        default: ''
      path:
        type: string
        description: Path of package, relative to the repo root
        required: false
        default: '.'
      package_specification:
        description: Specification of how to install the package, such as '.[tests]'
        required: false
        type: string
        default: .[tests]
    secrets:
      WANDB_API_KEY:
        required: false
      DISCNGINE_API_KEY:
        required: false
      NOTION_API_TOKEN:
        required: false
      PERKIN_ELMER_SIGNALS_SANDBOX_BASE_URL:
        required: false
      PERKIN_ELMER_SIGNALS_SANDBOX_API_KEY:
        required: false
      GOSTAR_PASSWORD:
        required: false
      DATAGEN_STAGING_PASSWORD:
        required: false

jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 20

    defaults:
      run:
        shell: bash -l {0}

    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python_versions) }}

    steps:
    - uses: actions/checkout@v2

    - name: Install apt packages
      run: sudo apt-get install --yes ${{ inputs.apt_packages }}

    - name: Generate RSA SSH keypair
      run: ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N ""

    - name: Create empty SSH config
      run: touch ~/.ssh/config

    - name: Install SSH
      run: |
        sudo apt-get install --yes openssh-server
        echo "ListenAddress 127.0.0.1" | sudo tee -a /etc/ssh/sshd_config
        sudo cat /etc/ssh/sshd_config
        sudo systemctl restart ssh
        sudo systemctl status ssh

    - name: Add localhost to known_hosts
      run: ssh-keyscan -H 127.0.0.1 >> ~/.ssh/known_hosts

    - name: Add public key to authorized_keys
      run: cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys

    # Configure conda if an environment file is provided
    - name: Set up micromamba
      if: ${{ inputs.environment_file != '' }}
      uses: mamba-org/provision-with-micromamba@v15
      with:
        cache-downloads: true
        cache-downloads-key: "mamba-${{ hashFiles(inputs.environment_file) }}"
        environment-file: ./${{ inputs.path }}/${{ inputs.environment_file }}
        cache-env: true
        environment-name: unit-testing
        extra-specs: |
          python=${{ matrix.python-version }}

    # Configure conda if an environment file is not provided
    - name: Set up micromamba
      if: ${{ inputs.environment_file == '' }}
      uses: mamba-org/provision-with-micromamba@v15
      with:
        environment-file: false
        environment-name: unit-testing
        channels: main
        cache-env: true
        extra-specs: |
          python=${{ matrix.python-version }}

    - name: Cache pip downloads
      uses: actions/cache@v3
      with:
        path: "~/.cache/pip"
        key: "pip-${{ hashFiles('setup.cfg') }}"
        restore-keys: |
          pip-${{ hashFiles('setup.cfg') }}
          pip-

    - name: Install package
      working-directory: ./${{ inputs.path }}
      run: |
        python -m pip install ${{ inputs.pip_install_args }} ${{ inputs.package_specification }}

    - name: Test with pytest
      working-directory: ./${{ inputs.path }}
      env:
        WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        DISCNGINE_API_KEY: ${{ secrets.DISCNGINE_API_KEY }}
        NOTION_API_TOKEN: ${{ secrets.NOTION_API_TOKEN }}
        PERKIN_ELMER_SIGNALS_BASE_URL: ${{ secrets.PERKIN_ELMER_SIGNALS_SANDBOX_BASE_URL }}
        PERKIN_ELMER_SIGNALS_API_KEY: ${{ secrets.PERKIN_ELMER_SIGNALS_SANDBOX_API_KEY }}
        GOSTAR_PASSWORD: ${{ secrets.GOSTAR_PASSWORD }}
        DATAGEN_STAGING_PASSWORD: ${{ secrets.DATAGEN_STAGING_PASSWORD }}

      run: |
        python -m pytest --cov-report=xml

    - name: Code Coverage
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: ./${{ inputs.path }}/coverage.xml
        badge: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '80 100'

    - uses: actions/upload-artifact@v2
      with:
        name: coverage
        path: coverage.xml
